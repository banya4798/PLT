<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="PLT_Space">

	<typeAlias alias="egovMap" type="egovframework.rte.psl.dataaccess.util.EgovMap" />
	<typeAlias alias="assignmentVO" type="PLT.vo.AssignmentVO" />
	<typeAlias alias="subVO" type="PLT.vo.SubmissionsVO" />
	<typeAlias alias="fVO" type="PLT.vo.FeedbackVO" />

	<!-- 과제 등록 -->
	<insert id="assignmentRegistration">
		insert into assignments(
			title,
			description,
			instructor_id,
			max_grade,
			due_date
		) values(
			#title#,
			#description#,
			(select user_id from users where username=#username#),
			#max_grade#,
			to_timestamp(#due_date#, 'yyyy-mm-dd"t"hh24:mi')
		)
	</insert>
	
	<select id="getInstructor_id" resultClass="int">
		select instructor_id
		from enrollments where user_id=(select user_id from users where username =#username#) group by instructor_id;
	</select>

	<select id="getAssignMentList" resultClass="assignmentVO">
		<!-- select 
			a.assignment_id, 
			a.title, 
			a.description, 
			a.instructor_id, 
			a.max_grade, 
			a.sub_status,
			to_char(a.due_date, 'yyyy-mm-dd hh24:mi:ss') as due_date
		from assignments a
		join users u on a.instructor_id = u.user_id
		join enrollments e on a.instructor_id = e.instructor_id
		where a.instructor_id in (
		    select instructor_id 
		    from enrollments 
		    where user_id = (select user_id from users where username = #username#)
		)
		group by 
			a.assignment_id, 
		    a.title, 
		    a.description, 
		    a.instructor_id, 
		    a.max_grade, 
		    a.sub_status,
		    to_char(a.due_date, 'yyyy-mm-dd hh24:mi:ss') -->
	<!-- 	select distinct
			    a.assignment_id, 
			    a.title, 
			    a.description, 
			    a.instructor_id, 
			    a.max_grade,
			    to_char(a.due_date, 'yyyy-mm-dd hh24:mi:ss') as due_date,
			   a.sub_status
			from assignments a
			join users u on a.instructor_id = u.user_id
			join enrollments e on a.instructor_id = e.instructor_id
			left join submissions s on s.status  = a.sub_status
			where e.user_id = (select user_id from users where username = #username#)
			order by assignment_id -->
			select distinct
			    a.assignment_id, 
			    a.title, 
			    a.description, 
			    a.instructor_id, 
			    a.max_grade,
			   	to_char(a.due_date, 'yyyy-mm-dd hh24:mi:ss') as due_date,
			    a.sub_status,
			    f.common,
			    f.rating,
			    to_char(f.created_at, 'yyyy-mm-dd hh24:mi:ss') as f_date
			from assignments a
			join users u on a.instructor_id = u.user_id
			left join submissions s on s.assignment_id = a.assignment_id 
						and s.student_id = (select user_id from users where username=#username#)
			left join feedback f on f.submissions_id = s.submissions_id
			join enrollments e on a.instructor_id = e.instructor_id
			where e.user_id = (select user_id from users where username=#username#)
			order by assignment_id
	</select>
	
	<!-- <select id="getFeedBackRating" resultClass="fVO">
		select distinct
		    a.assignment_id, 
		    a.title, 
		    a.description, 
		    a.instructor_id, 
		    a.max_grade,
		    to_char(a.due_date, 'yyyy-mm-dd hh24:mi:ss') as due_date,
		    a.sub_status
		    f.common,
		    f.rating,
		    f.created_at
		from assignments a
		join users u on a.instructor_id = u.user_id
		join submissions s on s.assignment_id = a.assignment_id
		join feedback f on f.submissions_id = s.submissions_id
		join enrollments e on a.instructor_id = e.instructor_id
		where e.user_id = (select user_id from users where username=#username#) and s.student_id = (select user_id from users where username=#username#)
		order by assignment_id
	</select> -->
	

	<!-- 학생의 과제 제출 -->
	<insert id="insert_sub">
		insert into submissions(
			title,
			content,
			assignment_id,
			student_id,
			f_origin_name
		) values(
			#title#,
			#content#,
			#assignment_id#,
			(select user_id from users where username=#username#),
			#f_origin_name#
		)
	</insert>

<update id="update_assignments_status">
	update assignments set sub_status = 'sub' 
		where  instructor_id=#instructor_id# and assignment_id =#assignment_id#
</update>


	<select id="getSubmissions" resultClass="subVO">
		select 
			submissions_id
		from submissions
		where title=#title# and content=#content# and assignment_id=#assignment_id#
			and student_id=(select user_id from users where username=#username#)
			and f_origin_name=#f_origin_name#
	</select>

	<!-- 과제 제출에 대한 파일 테이블 -->
	<insert id="sub_file">
		insert into submission_file(
			student_id,
			submissions_id,
			f_name,
			f_origin_name,
			f_path,
			f_size
		) values(
			(select user_id from users where username=#username#),
			#submissions_id#,
			#f_name#,
			#f_origin_name#,
			#f_path#,
			#f_size#
		)
	</insert>

	<select id="getSubmissionsList" resultClass="subVO">
			select distinct
		  		s.submissions_id, 
			    s.title, 
			    s.content, 
			    s.assignment_id, 
			    s.student_id, 
			    s.f_origin_name,
			    s.status,
			    s.grade,
			    to_char(s.submitted_at, 'yyyy-mm-dd hh24:mi:ss') as submitted_at
			from submissions s
			join users u on s.student_id = u.user_id
			join assignments a on s.assignment_id = a.assignment_id
			join users instructor on a.instructor_id = instructor.user_id
			where instructor.username = #username#
			order by submissions_id
	</select>
	
	
	<!-- 강사의 과제 채점 및 피드백 저장 -->
	<insert id="give_score">
		insert into feedback(
			submissions_id,
			instructor_id,
			student_id,
			assignment_id,
			common,
			rating
		) values(
			#submissions_id#,
			(select user_id from users where username=#username#),
			#student_id#,
			#assignment_id#,
			#common#,
			#rating#
		)
	</insert>


<update id="update_submissions_grade">
	update submissions set grade=#rating#, status='com'  where submissions_id=#submissions_id#
</update>


	<!-- 학생이 제출한 해당 과제를 강사가 조짐 -->
	<delete id="student_submiision_delete_from_instructor">
		delete from submissions where submissions_id=#submissions_id#
	</delete>

</sqlMap>